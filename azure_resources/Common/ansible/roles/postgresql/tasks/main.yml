---
- name: Gather the package facts
  ansible.builtin.package_facts:

- name: Check if requested version is supported in system (RHEL9)
  ansible.builtin.fail:
    msg: RHEL 9 supports only Postgresql 13 and 15
  when:
    - ansible_facts["os_family"] == "RedHat"
    - ansible_facts["distribution_major_version"] == "9"
    - postgresql_version | string not in __postgresql_versions_el9

- name: Check requested and installed version of Postgresql
  ansible.builtin.fail:
    msg: >-
      Setting version {{ postgresql_version }} while
      {{ ansible_facts.packages['postgresql'][0].version }} is installed
  when:
    - "'postgresql' in ansible_facts.packages"
    - ansible_facts.packages["postgresql"][0].version |
      regex_search('([0-9]*).', '\\1') | first != postgresql_version | string

# rpm ostree pkg mgr cannot handle @groups/modules
# so just assume the packages are present
- name: Ensure required packages are installed
  ansible.builtin.package:
    name: "{{ __actual_packages }}"
    state: present
  when: __actual_packages | length > 0
  vars:
    __actual_packages: "{{
      (ansible_facts.pkg_mgr | d() == 'ansible.posix.rhel_rpm_ostree') |
      ternary(__postgresql_packages | reject('match', '^@'),
      __postgresql_packages) | list }}"

- name: Check postgresql.conf
  ansible.builtin.stat:
    path: "{{ __postgresql_main_conf_file }}"
  register: __postgresql_conf

- name: Init DB
  when: not __postgresql_conf.stat.exists
  block:
    - name: Init DB
      ansible.builtin.command:
        cmd: postgresql-setup --initdb
        creates: "{{ __postgresql_main_conf_file }}"

    - name: Start Postgresql server
      become: true
      ansible.builtin.systemd:
        name: "postgresql.service"
        daemon_reload: true
        state: "started"
        enabled: true
      run_once: true
      loop: "{{ ansible_play_hosts }}"
      delegate_to: "{{ item }}"
      changed_when: false
      failed_when: false

- name: Configure postgresql.conf
  become: true
  ansible.builtin.template:
    backup: true
    dest: "{{ __postgresql_main_conf_file }}"
    src: "{{ postgresql_conf_file }}"
    mode: "0600"
    owner: postgres
    group: postgres
  when: postgresql_conf_file is defined
  notify: Restart postgresql

- name: Configure pg_hba.conf
  become: true
  ansible.builtin.template:
    backup: true
    dest: "{{ __postgresql_hba_conf_file }}"
    src: pg_hba.conf.j2
    mode: "0600"
    owner: postgres
    group: postgres
  when: postgresql_pg_hba_conf is defined
  notify: Restart postgresql

- name: Create default db
  when: postgresql_create_default is true
  block:
    - name: Create db user and password
      become: true
      become_user: postgres
      environment:
        PGPASSWORD: "{{ postgresql_password }}"
      ansible.builtin.command:
        cmd: >
          psql -c "CREATE USER {{ postgresql_db_user }} WITH ENCRYPTED PASSWORD '{{ postgresql_db_password }}';"
      changed_when: false
      no_log: true
      ignore_errors: true
      register: ignore_errors_register

    - name: Create DB
      become: true
      become_user: postgres
      environment:
        PGPASSWORD: "{{ postgresql_password }}"
      ansible.builtin.command:
        cmd: >
          psql -c "CREATE DATABASE {{ postgresql_db_name }} WITH ENCODING 'UNICODE' LC_COLLATE 'C' LC_CTYPE 'C' TEMPLATE template0;"
      changed_when: false
      ignore_errors: true
      register: ignore_errors_register

    - name: Grant db user permission on new DB
      become: true
      become_user: postgres
      environment:
        PGPASSWORD: "{{ postgresql_password }}"
      ansible.builtin.command:
        cmd: >
          psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ postgresql_db_name }} to {{ postgresql_db_user }};"
      changed_when: false
      ignore_errors: true
      register: ignore_errors_register

- name: Enable and start existing instance of postgresql server
  become: true
  ansible.builtin.systemd:
    name: "postgresql.service"
    daemon_reload: true
    state: "started"
    enabled: true
  run_once: true
  loop: "{{ ansible_play_hosts }}"
  delegate_to: "{{ item }}"
  changed_when: false
  failed_when: false

- name: Set and enable password
  when: postgresql_password is not none
  block:
    - name: Set password for super user # noqa = ignore-errors
      become: true
      become_user: postgres
      environment:
        PGPASSWORD: "{{ postgresql_password }}"
      ansible.builtin.command:
        cmd: >
          psql -c "ALTER USER postgres WITH ENCRYPTED PASSWORD
          '{{ postgresql_password }}';"
      changed_when: false
      ignore_errors: true
      register: ignore_errors_register
      no_log: true

    - name: Enable logging in by password
      ansible.builtin.replace:
        path: "{{ __postgresql_hba_conf_file }}"
        regexp: "(peer|ident)$"
        replace: "md5"
        backup: true
      notify: Restart postgresql
      ignore_errors: true
      register: ignore_errors_register

- name: Run provided SQL script
  ansible.builtin.include_tasks: input_sql_file.yml
  when: postgresql_input_file is defined

- name: Create postgresql directory in /etc
  ansible.builtin.file:
    path: /etc/postgresql
    state: directory
    mode: "0755"

- name: Link generated conf file with server one
  ansible.builtin.lineinfile:
    path: "{{ __postgresql_main_conf_file }}"
    line: "include_if_exists = '{{ __postgresql_internal_conf_file }}'"
    insertafter: "EOF"
  notify: Restart postgresql

- name: Generate postgresql system-roles-internal.conf
  become: true
  ansible.builtin.template:
    backup: true
    dest: "{{ __postgresql_internal_conf_file }}"
    src: postgresql-internal.conf.j2
    mode: "0600"
    owner: postgres
    group: postgres

- name: Generate postgresql system-roles.conf
  when: postgresql_server_conf is defined
  block:
    - name: Generate postgresql system-roles.conf
      become: true
      ansible.builtin.template:
        backup: true
        dest: "{{ __postgresql_conf_file }}"
        src: postgresql.conf.j2
        mode: "0600"
        owner: postgres
        group: postgres

    - name: Link generated conf file with server one
      ansible.builtin.lineinfile:
        path: "{{ __postgresql_main_conf_file }}"
        line: "include_if_exists = '{{ __postgresql_conf_file }}'"
      notify: Restart postgresql
