parameters:
  environment: ""
  playbook_dir: ""
  agent_pool: ""
  public_key_name: ""
  private_key_name: ""
  license: ""

stages:
  - stage: ansible_validation
    displayName: "Ansible Validation"
    pool: "${{ parameters.agent_pool }}"
    jobs:
      - job: ansible_check
        displayName: "Ansible Validation"
        steps:
          - task: DownloadSecureFile@1
            name: root
            displayName: "Download root certificates"
            inputs:
              secureFile: "${{ parameters.root_cert }}"

          - task: DownloadSecureFile@1
            name: intermediate
            displayName: "Download intermediate certificates"
            inputs:
              secureFile: "${{ parameters.intermediate_cert }}"

          - task: DownloadSecureFile@1
            name: publicKey
            displayName: "Download certificates public key"
            inputs:
              secureFile: "${{ parameters.public_key_name }}"

          - task: DownloadSecureFile@1
            name: privateKey
            displayName: "Download certificates private key"
            inputs:
              secureFile: "${{ parameters.private_key_name }}"

          - ${{ if ne(parameters.license, '') }}:
            - task: DownloadSecureFile@1
              name: license
              displayName: "Download license file"
              inputs:
                secureFile: "${{ parameters.license }}"

          - task: Bash@3
            displayName: "ansible-lint"
            inputs:
              targetType: "inline"
              script: "ansible-lint --offline -q -p ${{ parameters.playbook_dir }}/"
              workingDirectory: "$(System.DefaultWorkingDirectory)"
              failOnStderr: true

  - stage: ansible_deploy
    dependsOn: ansible_validation
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    displayName: "Ansible Deploy"
    pool: "${{ parameters.agent_pool }}"
    jobs:
      - deployment: ansible_deploy
        displayName: "Ansible Deploy"
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: DownloadSecureFile@1
                  name: root
                  displayName: "Download root certificates"
                  inputs:
                    secureFile: "${{ parameters.root_cert }}"

                - task: DownloadSecureFile@1
                  name: intermediate
                  displayName: "Download intermediate certificates"
                  inputs:
                    secureFile: "${{ parameters.intermediate_cert }}"

                - task: DownloadSecureFile@1
                  name: publicKey
                  displayName: "Download certificates public key"
                  inputs:
                    secureFile: "${{ parameters.public_key_name }}"

                - task: DownloadSecureFile@1
                  name: privateKey
                  displayName: "Download certificates private key"
                  inputs:
                    secureFile: "${{ parameters.private_key_name }}"

                - ${{ if ne(parameters.license, '') }}:
                  - task: DownloadSecureFile@1
                    name: license
                    displayName: "Download license file"
                    inputs:
                      secureFile: "${{ parameters.license }}"

                - task: Ansible@0
                  displayName: "ansible-playbook"
                  inputs:
                    ansibleInterface: "agentMachine"
                    playbookPathOnAgentMachine: "$(System.DefaultWorkingDirectory)/${{ parameters.playbook_dir }}/playbook.yml"
                    inventoriesAgentMachine: "file"
                    inventoryFileOnAgentMachine: "$(System.DefaultWorkingDirectory)/${{ parameters.playbook_dir }}/inventory/${{ parameters.environment }}/inventory.yaml"
                    ${{ if ne(parameters.license, '') }}:
                      args: '-e root_cert=$(root.secureFilePath) -e intermediate_cert=$(intermediate.secureFilePath) -e certificate_public_key_file=$(publicKey.secureFilePath) -e certificate_private_key_file=$(privateKey.secureFilePath) -e license=$(license.secureFilePath)'
                    ${{ else }}:
                      args: '-e root_cert=$(root.secureFilePath) -e intermediate_cert=$(intermediate.secureFilePath) -e certificate_public_key_file=$(publicKey.secureFilePath) -e certificate_private_key_file=$(privateKey.secureFilePath)'
