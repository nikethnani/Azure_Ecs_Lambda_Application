parameters:
  environment: ''
  state_file_dir: ''
  terraform_dir: ''
  service_connection: ''
  resource_group: ''
  storage_account: ''
  agent_pool: ''

stages:
- stage: terraform_validation
  displayName: "Terraform Validation"
  pool: '${{ parameters.agent_pool }}'
  jobs:
  - job: terraform_plan
    displayName: "Terraform Validation"
    steps:
      - task: TerraformInstaller@1
        displayName: "Install Terraform"
        inputs:
          terraformVersion: "latest"
      
      - task: TerraformTaskV4@4
        displayName: "terraform init"
        inputs:
          provider: azurerm
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)${{ parameters.terraform_dir }}'
          backendServiceArm: '${{ parameters.service_connection }}'
          backendAzureRmResourceGroupName: '${{ parameters.resource_group }}'
          backendAzureRmStorageAccountName: '${{ parameters.storage_account }}'
          backendAzureRmContainerName: 'tf-state'
          backendAzureRmKey: '${{ parameters.state_file_dir }}/${{ parameters.environment }}.tfstate'

      - task: TerraformTaskV4@4
        displayName: "terraform plan"
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)${{ parameters.terraform_dir }}'
          commandOptions: '-var-file="./environments/${{ parameters.environment }}.tfvars" -lock=false'
          environmentServiceNameAzureRM: '${{ parameters.service_connection }}'

- stage: terraform_deploy
  dependsOn: terraform_validation
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  displayName: "Terraform Deploy"
  pool: '${{ parameters.agent_pool }}'
  jobs:
  - deployment: terraform_deploy
    displayName: "Terraform Deploy"
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: TerraformInstaller@1
              displayName: "Install Terraform"
              inputs:
                terraformVersion: "latest"
          
            - task: TerraformTaskV4@4
              displayName: "terraform init"
              inputs:
                provider: azurerm
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)${{ parameters.terraform_dir }}'
                backendServiceArm: '${{ parameters.service_connection }}'
                backendAzureRmResourceGroupName: '${{ parameters.resource_group }}'
                backendAzureRmStorageAccountName: '${{ parameters.storage_account }}'
                backendAzureRmContainerName: 'tf-state'
                backendAzureRmKey: '${{ parameters.state_file_dir }}/${{ parameters.environment }}.tfstate'
            
            - task: TerraformTaskV4@4
              displayName: "terraform apply"
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)${{ parameters.terraform_dir }}'
                commandOptions: '-var-file="./environments/${{ parameters.environment }}.tfvars" -lock=false'
                environmentServiceNameAzureRM: '${{ parameters.service_connection }}'
